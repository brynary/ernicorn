#!/usr/bin/env ruby
#/ Usage: ernicorn [options] [config file]
#/ Start a Ruby BERT-RPC Server with the given options and config file.
#/
#/ Options
#/   -c, --config=<file>        Unicorn style config file
#/   -h, --host=<host>          Server address to listen on; default: 0.0.0.0
#/   -p, --port=<portno>        Server port to listen on; default: 8000
#/       --log-level=0-4        Set the log level
#/   -d, --detached             Run as a daemon
#/   -P, --pidfile=<file>       Location to write pid file
#/
#/ See https://github.com/github/ernicorn for more information.
require 'optparse'
require 'ernicorn'
require 'ernicorn/server'
require 'ernicorn/adminrpc'

Ernicorn.auto_start = false

host = '0.0.0.0'
port = 8000
daemonize = false
config = 'config/ernicorn.rb'
pidfile = nil

parser = OptionParser.new do |opts|
  opts.on("-c", "--config=val", String)     { |config| }
  opts.on("-h", "--host=val", Integer)      { |host| }
  opts.on("-p", "--port=val", Integer)      { |port| }
  opts.on(      "--log-level=val", Integer) { |val| Ernicorn.loglevel(val) }
  opts.on("-d", "--detached")               { |daemonize| }
  opts.on("-P", "--pidfile=val")            { |pidfile| }
  opts.on_tail("-h", "--help")              { exec "grep ^#/<'#{__FILE__}'|cut -c4-" }
  opts.parse!
end

config = ARGV[0] || config

options = {
  :pid         => pidfile,
  :listeners   => ["#{host}:#{port}"],
  :config_file => File.expand_path(config)
}

if daemonize
  require 'unicorn/launcher'
  Unicorn::Launcher.daemonize!(options)
end

$ernicorn = Ernicorn::Server.new(handler, options)
$ernicorn.start.join
